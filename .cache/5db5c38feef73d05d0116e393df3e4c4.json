{"dependencies":[{"name":"react"},{"name":"prop-types"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transverter = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nransverter组件最多只支持数据结构为两层的数据转换\nn\nvar Transverter = exports.Transverter = function (_Component) {\n  _inherits(Transverter, _Component);\n\n  function Transverter(props) {\n    _classCallCheck(this, Transverter);\n\n    var _this = _possibleConstructorReturn(this, (Transverter.__proto__ || Object.getPrototypeOf(Transverter)).call(this, props));\n\n    var _this$props = _this.props,\n        inputSource = _this$props.inputSource,\n        mapper = _this$props.mapper,\n        puppetothersource = _this$props.puppetothersource;\n\n    _this.state = {\n      _inputSource: inputSource, // 数据输入来源\n      _mapper: mapper, // 数据转换映射表\n      _secondProps: puppetothersource // 木偶组件其他数据来源\n    };\n    return _this;\n  }\n\n  /**\n   *  数据转换器\n   *  对于一层数据结构，直接做数据分流；\n   *  对于二层数据结构，在mainSource中选择对应的数据进行\n   *  数据分流处理；\n   * */\n\n\n  _createClass(Transverter, [{\n    key: \"_transformData\",\n    value: function _transformData() {\n      var puppetmainsource = this.props.puppetmainsource;\n      var _state = this.state,\n          _inputSource = _state._inputSource,\n          _mapper = _state._mapper;\n\n      if (puppetmainsource) {\n        return this._dataShunt(_inputSource[puppetmainsource], _mapper);\n      } else {\n        return this._dataShunt(_inputSource, _mapper);\n      }\n    }\n\n    // 数据类型分流器\n\n  }, {\n    key: \"_dataShunt\",\n    value: function _dataShunt(data, mapper) {\n      if (data instanceof Array) {\n        return this._transformArray(data, mapper);\n      }\n      if ((typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) == \"object\") {\n        return this._transformObject(data, mapper);\n      }\n      return data;\n    }\n\n    // 对象类型转换器\n\n  }, {\n    key: \"_transformObject\",\n    value: function _transformObject(data, mapper) {\n      var mainObj = {};\n      mapper.forEach(function (_map) {\n        mainObj[_map.target] = data[_map.source];\n      });\n      var otherObj = {};\n      var dataKeys = Object.keys(data);\n      var mapperKeys = mapper.map(function (_map) {\n        return _map.source;\n      });\n      dataKeys.forEach(function (_key) {\n        if (mapperKeys.indexOf(_key) == -1) otherObj[_key] = data[_key];\n      });\n      return Object.assign({}, mainObj, otherObj);\n    }\n\n    // 数组类型转换器\n\n  }, {\n    key: \"_transformArray\",\n    value: function _transformArray(data, mapper) {\n      var _this2 = this;\n\n      var objArr = [];\n      data.forEach(function (_list) {\n        var listObj = _this2._transformObject(_list, mapper);\n        objArr.push(listObj);\n      });\n      return objArr;\n    }\n  }, {\n    key: \"_puppetProps\",\n    value: function _puppetProps(data) {\n      var mainProps = this._puppetMainProps(data);\n      var _secondProps = this.state._secondProps;\n\n      return Object.assign({}, mainProps, _secondProps);\n    }\n\n    // 木偶组件主要属性\n\n  }, {\n    key: \"_puppetMainProps\",\n    value: function _puppetMainProps(data) {\n      var _inputSource = this.state._inputSource;\n      var _props = this.props,\n          puppetmainsource = _props.puppetmainsource,\n          puppetmainprops = _props.puppetmainprops;\n\n      var prop1 = {};\n      if (puppetmainsource) {\n        prop1[puppetmainsource] = data;\n      } else {\n        prop1 = data;\n      }\n      prop1 = Object.assign({}, _inputSource, prop1);\n      var prop2 = {};\n      prop2[puppetmainprops] = prop1;\n      return prop2;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      this.setState({\n        _inputSource: newProps.inputSource,\n        _mapper: newProps.mapper,\n        secondProps: newProps.puppetothersource\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Puppet = this.props.Puppet;\n\n      var _innerData = this._transformData();\n      var puppetData = this._puppetProps(_innerData);\n      return _react2.default.createElement(\n        \"div\",\n        null,\n        _react2.default.createElement(Puppet, puppetData)\n      );\n    }\n  }]);\n\n  return Transverter;\n}(_react.Component);\n\nTransverter.propTypes = {\n  inputSource: _propTypes2.default.object.isRequired,\n  mapper: _propTypes2.default.array.isRequired,\n  puppetmainprops: _propTypes2.default.string.isRequired,\n  Puppet: function Puppet(props, propName, componentName) {\n    if (!props[propName]) {\n      throw new Error(propName + \" is required in \" + componentName);\n    }\n  }\n};"},"hash":"296818cd921b82d5f0de80f76609d4bc"}