{"dependencies":[{"name":"babel-runtime/helpers/defineProperty","loc":{"line":1,"column":28}},{"name":"babel-runtime/helpers/extends","loc":{"line":2,"column":21}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":3,"column":28}},{"name":"babel-runtime/helpers/createClass","loc":{"line":4,"column":25}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":5,"column":39}},{"name":"babel-runtime/helpers/inherits","loc":{"line":6,"column":22}},{"name":"react","loc":{"line":7,"column":23}},{"name":"rc-upload","loc":{"line":8,"column":21}},{"name":"classnames","loc":{"line":9,"column":23}},{"name":"../locale-provider/LocaleReceiver","loc":{"line":10,"column":27}},{"name":"../locale-provider/default","loc":{"line":11,"column":26}},{"name":"./UploadList","loc":{"line":12,"column":23}},{"name":"./utils","loc":{"line":13,"column":76}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require(\"react\");\n\nvar React = _interopRequireWildcard(_react);\n\nvar _rcUpload = require(\"rc-upload\");\n\nvar _rcUpload2 = _interopRequireDefault(_rcUpload);\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _LocaleReceiver = require(\"../locale-provider/LocaleReceiver\");\n\nvar _LocaleReceiver2 = _interopRequireDefault(_LocaleReceiver);\n\nvar _default = require(\"../locale-provider/default\");\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _UploadList = require(\"./UploadList\");\n\nvar _UploadList2 = _interopRequireDefault(_UploadList);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Upload = function (_React$Component) {\n  (0, _inherits3.default)(Upload, _React$Component);\n\n  function Upload(props) {\n    (0, _classCallCheck3.default)(this, Upload);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));\n\n    _this.onStart = function (file) {\n      var targetItem = void 0;\n      var nextFileList = _this.state.fileList.concat();\n      targetItem = (0, _utils.fileToObject)(file);\n      targetItem.status = 'uploading';\n      nextFileList.push(targetItem);\n      _this.onChange({\n        file: targetItem,\n        fileList: nextFileList\n      });\n      // fix ie progress\n      if (!window.FormData) {\n        _this.autoUpdateProgress(0, targetItem);\n      }\n    };\n    _this.onSuccess = function (response, file) {\n      _this.clearProgressTimer();\n      try {\n        if (typeof response === 'string') {\n          response = JSON.parse(response);\n        }\n      } catch (e) {}\n      var fileList = _this.state.fileList;\n      var targetItem = (0, _utils.getFileItem)(file, fileList);\n      // removed\n      if (!targetItem) {\n        return;\n      }\n      targetItem.status = 'done';\n      targetItem.response = response;\n      _this.onChange({\n        file: (0, _extends3.default)({}, targetItem),\n        fileList: fileList\n      });\n    };\n    _this.onProgress = function (e, file) {\n      var fileList = _this.state.fileList;\n      var targetItem = (0, _utils.getFileItem)(file, fileList);\n      // removed\n      if (!targetItem) {\n        return;\n      }\n      targetItem.percent = e.percent;\n      _this.onChange({\n        event: e,\n        file: (0, _extends3.default)({}, targetItem),\n        fileList: _this.state.fileList\n      });\n    };\n    _this.onError = function (error, response, file) {\n      _this.clearProgressTimer();\n      var fileList = _this.state.fileList;\n      var targetItem = (0, _utils.getFileItem)(file, fileList);\n      // removed\n      if (!targetItem) {\n        return;\n      }\n      targetItem.error = error;\n      targetItem.response = response;\n      targetItem.status = 'error';\n      _this.onChange({\n        file: (0, _extends3.default)({}, targetItem),\n        fileList: fileList\n      });\n    };\n    _this.handleManualRemove = function (file) {\n      _this.upload.abort(file);\n      file.status = 'removed'; // eslint-disable-line\n      _this.handleRemove(file);\n    };\n    _this.onChange = function (info) {\n      var updateState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!('fileList' in _this.props) && updateState) {\n        _this.setState({ fileList: info.fileList });\n      }\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(info);\n      }\n    };\n    _this.onFileDrop = function (e) {\n      _this.setState({\n        dragState: e.type\n      });\n    };\n    _this.beforeUpload = function (file, fileList) {\n      if (!_this.props.beforeUpload) {\n        return true;\n      }\n      var result = _this.props.beforeUpload(file, fileList);\n      if (result === false) {\n        _this.onChange({\n          file: file,\n          fileList: fileList\n        }, false);\n        return false;\n      } else if (result && result.then) {\n        return result;\n      }\n      return true;\n    };\n    _this.saveUpload = function (node) {\n      _this.upload = node;\n    };\n    _this.renderUploadList = function (locale) {\n      var _this$props = _this.props,\n          showUploadList = _this$props.showUploadList,\n          listType = _this$props.listType,\n          onPreview = _this$props.onPreview;\n      var showRemoveIcon = showUploadList.showRemoveIcon,\n          showPreviewIcon = showUploadList.showPreviewIcon;\n\n      return React.createElement(_UploadList2.default, { listType: listType, items: _this.state.fileList, onPreview: onPreview, onRemove: _this.handleManualRemove, showRemoveIcon: showRemoveIcon, showPreviewIcon: showPreviewIcon, locale: (0, _extends3.default)({}, locale, _this.props.locale) });\n    };\n    _this.state = {\n      fileList: props.fileList || props.defaultFileList || [],\n      dragState: 'drop'\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Upload, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.clearProgressTimer();\n    }\n  }, {\n    key: 'autoUpdateProgress',\n    value: function autoUpdateProgress(_, file) {\n      var _this2 = this;\n\n      var getPercent = (0, _utils.genPercentAdd)();\n      var curPercent = 0;\n      this.clearProgressTimer();\n      this.progressTimer = setInterval(function () {\n        curPercent = getPercent(curPercent);\n        _this2.onProgress({\n          percent: curPercent\n        }, file);\n      }, 200);\n    }\n  }, {\n    key: 'handleRemove',\n    value: function handleRemove(file) {\n      var _this3 = this;\n\n      var onRemove = this.props.onRemove;\n\n      Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {\n        // Prevent removing file\n        if (ret === false) {\n          return;\n        }\n        var removedFileList = (0, _utils.removeFileItem)(file, _this3.state.fileList);\n        if (removedFileList) {\n          _this3.onChange({\n            file: file,\n            fileList: removedFileList\n          });\n        }\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('fileList' in nextProps) {\n        this.setState({\n          fileList: nextProps.fileList || []\n        });\n      }\n    }\n  }, {\n    key: 'clearProgressTimer',\n    value: function clearProgressTimer() {\n      clearInterval(this.progressTimer);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames2;\n\n      var _props = this.props,\n          _props$prefixCls = _props.prefixCls,\n          prefixCls = _props$prefixCls === undefined ? '' : _props$prefixCls,\n          className = _props.className,\n          showUploadList = _props.showUploadList,\n          listType = _props.listType,\n          type = _props.type,\n          disabled = _props.disabled,\n          children = _props.children;\n\n      var rcUploadProps = (0, _extends3.default)({ onStart: this.onStart, onError: this.onError, onProgress: this.onProgress, onSuccess: this.onSuccess }, this.props, { beforeUpload: this.beforeUpload });\n      delete rcUploadProps.className;\n      var uploadList = showUploadList ? React.createElement(_LocaleReceiver2.default, { componentName: 'Upload', defaultLocale: _default2.default.Upload }, this.renderUploadList) : null;\n      if (type === 'drag') {\n        var _classNames;\n\n        var dragCls = (0, _classnames2.default)(prefixCls, (_classNames = {}, (0, _defineProperty3.default)(_classNames, prefixCls + '-drag', true), (0, _defineProperty3.default)(_classNames, prefixCls + '-drag-uploading', this.state.fileList.some(function (file) {\n          return file.status === 'uploading';\n        })), (0, _defineProperty3.default)(_classNames, prefixCls + '-drag-hover', this.state.dragState === 'dragover'), (0, _defineProperty3.default)(_classNames, prefixCls + '-disabled', disabled), _classNames));\n        return React.createElement('span', { className: className }, React.createElement('div', { className: dragCls, onDrop: this.onFileDrop, onDragOver: this.onFileDrop, onDragLeave: this.onFileDrop }, React.createElement(_rcUpload2.default, (0, _extends3.default)({}, rcUploadProps, { ref: this.saveUpload, className: prefixCls + '-btn' }), React.createElement('div', { className: prefixCls + '-drag-container' }, children))), uploadList);\n      }\n      var uploadButtonCls = (0, _classnames2.default)(prefixCls, (_classNames2 = {}, (0, _defineProperty3.default)(_classNames2, prefixCls + '-select', true), (0, _defineProperty3.default)(_classNames2, prefixCls + '-select-' + listType, true), (0, _defineProperty3.default)(_classNames2, prefixCls + '-disabled', disabled), _classNames2));\n      var uploadButton = React.createElement('div', { className: uploadButtonCls, style: { display: children ? '' : 'none' } }, React.createElement(_rcUpload2.default, (0, _extends3.default)({}, rcUploadProps, { ref: this.saveUpload })));\n      if (listType === 'picture-card') {\n        return React.createElement('span', { className: className }, uploadList, uploadButton);\n      }\n      return React.createElement('span', { className: className }, uploadButton, uploadList);\n    }\n  }]);\n\n  return Upload;\n}(React.Component);\n\nexports.default = Upload;\n\n\nUpload.defaultProps = {\n  prefixCls: 'ant-upload',\n  type: 'select',\n  multiple: false,\n  action: '',\n  data: {},\n  accept: '',\n  beforeUpload: _utils.T,\n  showUploadList: true,\n  listType: 'text',\n  className: '',\n  disabled: false,\n  supportServerRender: true\n};"},"hash":"ed383f4512f15e7982aa484759104155"}