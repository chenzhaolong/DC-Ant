{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":1,"column":21}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":2,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":3,"column":39}},{"name":"babel-runtime/helpers/inherits","loc":{"line":4,"column":22}},{"name":"react","loc":{"line":5,"column":33}},{"name":"prop-types","loc":{"line":6,"column":22}},{"name":"react-dom","loc":{"line":7,"column":21}},{"name":"rc-align","loc":{"line":8,"column":18}},{"name":"rc-animate","loc":{"line":9,"column":20}},{"name":"./PopupInner","loc":{"line":10,"column":23}},{"name":"./LazyRenderBox","loc":{"line":11,"column":26}},{"name":"./utils","loc":{"line":12,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _rcAlign = require(\"rc-align\");\n\nvar _rcAlign2 = _interopRequireDefault(_rcAlign);\n\nvar _rcAnimate = require(\"rc-animate\");\n\nvar _rcAnimate2 = _interopRequireDefault(_rcAnimate);\n\nvar _PopupInner = require(\"./PopupInner\");\n\nvar _PopupInner2 = _interopRequireDefault(_PopupInner);\n\nvar _LazyRenderBox = require(\"./LazyRenderBox\");\n\nvar _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Popup = function (_Component) {\n  (0, _inherits3.default)(Popup, _Component);\n\n  function Popup(props) {\n    (0, _classCallCheck3.default)(this, Popup);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.savePopupRef = _utils.saveRef.bind(_this, 'popupInstance');\n    _this.saveAlignRef = _utils.saveRef.bind(_this, 'alignInstance');\n    return _this;\n  }\n\n  Popup.prototype.componentDidMount = function componentDidMount() {\n    this.rootNode = this.getPopupDomNode();\n  };\n\n  Popup.prototype.getPopupDomNode = function getPopupDomNode() {\n    return _reactDom2.default.findDOMNode(this.popupInstance);\n  };\n\n  Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {\n    var props = this.props;\n    var transitionName = props.maskTransitionName;\n    var animation = props.maskAnimation;\n    if (!transitionName && animation) {\n      transitionName = props.prefixCls + '-' + animation;\n    }\n    return transitionName;\n  };\n\n  Popup.prototype.getTransitionName = function getTransitionName() {\n    var props = this.props;\n    var transitionName = props.transitionName;\n    if (!transitionName && props.animation) {\n      transitionName = props.prefixCls + '-' + props.animation;\n    }\n    return transitionName;\n  };\n\n  Popup.prototype.getClassName = function getClassName(currentAlignClassName) {\n    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;\n  };\n\n  Popup.prototype.getPopupElement = function getPopupElement() {\n    var savePopupRef = this.savePopupRef,\n        props = this.props;\n    var align = props.align,\n        style = props.style,\n        visible = props.visible,\n        prefixCls = props.prefixCls,\n        destroyPopupOnHide = props.destroyPopupOnHide;\n\n    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));\n    var hiddenClassName = prefixCls + '-hidden';\n    if (!visible) {\n      this.currentAlignClassName = null;\n    }\n    var newStyle = (0, _extends3.default)({}, style, this.getZIndexStyle());\n    var popupInnerProps = {\n      className: className,\n      prefixCls: prefixCls,\n      ref: savePopupRef,\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.onMouseLeave,\n      style: newStyle\n    };\n    if (destroyPopupOnHide) {\n      return _react2.default.createElement(_rcAnimate2.default, {\n        component: '',\n        exclusive: true,\n        transitionAppear: true,\n        transitionName: this.getTransitionName()\n      }, visible ? _react2.default.createElement(_rcAlign2.default, {\n        target: this.getTarget,\n        key: 'popup',\n        ref: this.saveAlignRef,\n        monitorWindowResize: true,\n        align: align,\n        onAlign: this.onAlign\n      }, _react2.default.createElement(_PopupInner2.default, (0, _extends3.default)({\n        visible: true\n      }, popupInnerProps), props.children)) : null);\n    }\n    return _react2.default.createElement(_rcAnimate2.default, {\n      component: '',\n      exclusive: true,\n      transitionAppear: true,\n      transitionName: this.getTransitionName(),\n      showProp: 'xVisible'\n    }, _react2.default.createElement(_rcAlign2.default, {\n      target: this.getTarget,\n      key: 'popup',\n      ref: this.saveAlignRef,\n      monitorWindowResize: true,\n      xVisible: visible,\n      childrenProps: { visible: 'xVisible' },\n      disabled: !visible,\n      align: align,\n      onAlign: this.onAlign\n    }, _react2.default.createElement(_PopupInner2.default, (0, _extends3.default)({\n      hiddenClassName: hiddenClassName\n    }, popupInnerProps), props.children)));\n  };\n\n  Popup.prototype.getZIndexStyle = function getZIndexStyle() {\n    var style = {};\n    var props = this.props;\n    if (props.zIndex !== undefined) {\n      style.zIndex = props.zIndex;\n    }\n    return style;\n  };\n\n  Popup.prototype.getMaskElement = function getMaskElement() {\n    var props = this.props;\n    var maskElement = void 0;\n    if (props.mask) {\n      var maskTransition = this.getMaskTransitionName();\n      maskElement = _react2.default.createElement(_LazyRenderBox2.default, {\n        style: this.getZIndexStyle(),\n        key: 'mask',\n        className: props.prefixCls + '-mask',\n        hiddenClassName: props.prefixCls + '-mask-hidden',\n        visible: props.visible\n      });\n      if (maskTransition) {\n        maskElement = _react2.default.createElement(_rcAnimate2.default, {\n          key: 'mask',\n          showProp: 'visible',\n          transitionAppear: true,\n          component: '',\n          transitionName: maskTransition\n        }, maskElement);\n      }\n    }\n    return maskElement;\n  };\n\n  Popup.prototype.render = function render() {\n    return _react2.default.createElement('div', null, this.getMaskElement(), this.getPopupElement());\n  };\n\n  return Popup;\n}(_react.Component);\n\nPopup.propTypes = {\n  visible: _propTypes2.default.bool,\n  style: _propTypes2.default.object,\n  getClassNameFromAlign: _propTypes2.default.func,\n  onAlign: _propTypes2.default.func,\n  getRootDomNode: _propTypes2.default.func,\n  onMouseEnter: _propTypes2.default.func,\n  align: _propTypes2.default.any,\n  destroyPopupOnHide: _propTypes2.default.bool,\n  className: _propTypes2.default.string,\n  prefixCls: _propTypes2.default.string,\n  onMouseLeave: _propTypes2.default.func\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onAlign = function (popupDomNode, align) {\n    var props = _this2.props;\n    var currentAlignClassName = props.getClassNameFromAlign(align);\n    // FIX: https://github.com/react-component/trigger/issues/56\n    // FIX: https://github.com/react-component/tooltip/issues/79\n    if (_this2.currentAlignClassName !== currentAlignClassName) {\n      _this2.currentAlignClassName = currentAlignClassName;\n      popupDomNode.className = _this2.getClassName(currentAlignClassName);\n    }\n    props.onAlign(popupDomNode, align);\n  };\n\n  this.getTarget = function () {\n    return _this2.props.getRootDomNode();\n  };\n};\n\nexports.default = Popup;"},"hash":"2aa5684181a60c500bc757954da52d3f"}