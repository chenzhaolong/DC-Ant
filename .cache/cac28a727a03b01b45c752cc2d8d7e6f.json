{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":1,"column":21}},{"name":"react","loc":{"line":2,"column":23}},{"name":"rc-notification","loc":{"line":3,"column":25}},{"name":"../icon","loc":{"line":4,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require(\"react\");\n\nvar React = _interopRequireWildcard(_react);\n\nvar _rcNotification = require(\"rc-notification\");\n\nvar _rcNotification2 = _interopRequireDefault(_rcNotification);\n\nvar _icon = require(\"../icon\");\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar notificationInstance = {};\nvar defaultDuration = 4.5;\nvar defaultTop = 24;\nvar defaultBottom = 24;\nvar defaultPlacement = 'topRight';\nvar defaultGetContainer = void 0;\nfunction setNotificationConfig(options) {\n  var duration = options.duration,\n      placement = options.placement,\n      bottom = options.bottom,\n      top = options.top,\n      getContainer = options.getContainer;\n\n  if (duration !== undefined) {\n    defaultDuration = duration;\n  }\n  if (placement !== undefined) {\n    defaultPlacement = placement;\n  }\n  if (bottom !== undefined) {\n    defaultBottom = bottom;\n  }\n  if (top !== undefined) {\n    defaultTop = top;\n  }\n  if (getContainer !== undefined) {\n    defaultGetContainer = getContainer;\n  }\n}\nfunction getPlacementStyle(placement) {\n  var style = void 0;\n  switch (placement) {\n    case 'topLeft':\n      style = {\n        left: 0,\n        top: defaultTop,\n        bottom: 'auto'\n      };\n      break;\n    case 'topRight':\n      style = {\n        right: 0,\n        top: defaultTop,\n        bottom: 'auto'\n      };\n      break;\n    case 'bottomLeft':\n      style = {\n        left: 0,\n        top: 'auto',\n        bottom: defaultBottom\n      };\n      break;\n    default:\n      style = {\n        right: 0,\n        top: 'auto',\n        bottom: defaultBottom\n      };\n      break;\n  }\n  return style;\n}\nfunction getNotificationInstance(prefixCls, placement, callback) {\n  var cacheKey = prefixCls + '-' + placement;\n  if (notificationInstance[cacheKey]) {\n    callback(notificationInstance[cacheKey]);\n    return;\n  }\n  _rcNotification2.default.newInstance({\n    prefixCls: prefixCls,\n    className: prefixCls + '-' + placement,\n    style: getPlacementStyle(placement),\n    getContainer: defaultGetContainer\n  }, function (notification) {\n    notificationInstance[cacheKey] = notification;\n    callback(notification);\n  });\n}\nvar typeToIcon = {\n  success: 'check-circle-o',\n  info: 'info-circle-o',\n  error: 'cross-circle-o',\n  warning: 'exclamation-circle-o'\n};\nfunction notice(args) {\n  var outerPrefixCls = args.prefixCls || 'ant-notification';\n  var prefixCls = outerPrefixCls + '-notice';\n  var duration = args.duration === undefined ? defaultDuration : args.duration;\n  var iconNode = null;\n  if (args.icon) {\n    iconNode = React.createElement('span', { className: prefixCls + '-icon' }, args.icon);\n  } else if (args.type) {\n    var iconType = typeToIcon[args.type];\n    iconNode = React.createElement(_icon2.default, { className: prefixCls + '-icon ' + prefixCls + '-icon-' + args.type, type: iconType });\n  }\n  var autoMarginTag = !args.description && iconNode ? React.createElement('span', { className: prefixCls + '-message-single-line-auto-margin' }) : null;\n  getNotificationInstance(outerPrefixCls, args.placement || defaultPlacement, function (notification) {\n    notification.notice({\n      content: React.createElement('div', { className: iconNode ? prefixCls + '-with-icon' : '' }, iconNode, React.createElement('div', { className: prefixCls + '-message' }, autoMarginTag, args.message), React.createElement('div', { className: prefixCls + '-description' }, args.description), args.btn ? React.createElement('span', { className: prefixCls + '-btn' }, args.btn) : null),\n      duration: duration,\n      closable: true,\n      onClose: args.onClose,\n      key: args.key,\n      style: args.style || {},\n      className: args.className\n    });\n  });\n}\nvar api = {\n  open: notice,\n  close: function close(key) {\n    Object.keys(notificationInstance).forEach(function (cacheKey) {\n      return notificationInstance[cacheKey].removeNotice(key);\n    });\n  },\n\n  config: setNotificationConfig,\n  destroy: function destroy() {\n    Object.keys(notificationInstance).forEach(function (cacheKey) {\n      notificationInstance[cacheKey].destroy();\n      delete notificationInstance[cacheKey];\n    });\n  }\n};\n['success', 'info', 'warning', 'error'].forEach(function (type) {\n  api[type] = function (args) {\n    return api.open((0, _extends3.default)({}, args, { type: type }));\n  };\n});\napi.warn = api.warning;\nexports.default = api;"},"hash":"fc01e640a75ae23afd6005448654451e"}