{"dependencies":[{"name":"babel-runtime/helpers/defineProperty","loc":{"line":1,"column":28}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":2,"column":28}},{"name":"babel-runtime/helpers/createClass","loc":{"line":3,"column":25}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":4,"column":39}},{"name":"babel-runtime/helpers/inherits","loc":{"line":5,"column":22}},{"name":"react","loc":{"line":6,"column":23}},{"name":"react-dom","loc":{"line":7,"column":26}},{"name":"rc-menu","loc":{"line":8,"column":48}},{"name":"dom-closest","loc":{"line":9,"column":20}},{"name":"classnames","loc":{"line":10,"column":23}},{"name":"../dropdown","loc":{"line":11,"column":21}},{"name":"../icon","loc":{"line":12,"column":17}},{"name":"../checkbox","loc":{"line":13,"column":21}},{"name":"../radio","loc":{"line":14,"column":18}},{"name":"./FilterDropdownMenuWrapper","loc":{"line":15,"column":38}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require(\"react\");\n\nvar React = _interopRequireWildcard(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar ReactDOM = _interopRequireWildcard(_reactDom);\n\nvar _rcMenu = require(\"rc-menu\");\n\nvar _rcMenu2 = _interopRequireDefault(_rcMenu);\n\nvar _domClosest = require(\"dom-closest\");\n\nvar _domClosest2 = _interopRequireDefault(_domClosest);\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _dropdown = require(\"../dropdown\");\n\nvar _dropdown2 = _interopRequireDefault(_dropdown);\n\nvar _icon = require(\"../icon\");\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _checkbox = require(\"../checkbox\");\n\nvar _checkbox2 = _interopRequireDefault(_checkbox);\n\nvar _radio = require(\"../radio\");\n\nvar _radio2 = _interopRequireDefault(_radio);\n\nvar _FilterDropdownMenuWrapper = require(\"./FilterDropdownMenuWrapper\");\n\nvar _FilterDropdownMenuWrapper2 = _interopRequireDefault(_FilterDropdownMenuWrapper);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FilterMenu = function (_React$Component) {\n  (0, _inherits3.default)(FilterMenu, _React$Component);\n\n  function FilterMenu(props) {\n    (0, _classCallCheck3.default)(this, FilterMenu);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (FilterMenu.__proto__ || Object.getPrototypeOf(FilterMenu)).call(this, props));\n\n    _this.setNeverShown = function (column) {\n      var rootNode = ReactDOM.findDOMNode(_this);\n      var filterBelongToScrollBody = !!(0, _domClosest2.default)(rootNode, '.ant-table-scroll');\n      if (filterBelongToScrollBody) {\n        // When fixed column have filters, there will be two dropdown menus\n        // Filter dropdown menu inside scroll body should never be shown\n        // To fix https://github.com/ant-design/ant-design/issues/5010 and\n        // https://github.com/ant-design/ant-design/issues/7909\n        _this.neverShown = !!column.fixed;\n      }\n    };\n    _this.setSelectedKeys = function (_ref) {\n      var selectedKeys = _ref.selectedKeys;\n\n      _this.setState({ selectedKeys: selectedKeys });\n    };\n    _this.handleClearFilters = function () {\n      _this.setState({\n        selectedKeys: []\n      }, _this.handleConfirm);\n    };\n    _this.handleConfirm = function () {\n      _this.setVisible(false);\n      _this.confirmFilter();\n    };\n    _this.onVisibleChange = function (visible) {\n      _this.setVisible(visible);\n      if (!visible) {\n        _this.confirmFilter();\n      }\n    };\n    _this.handleMenuItemClick = function (info) {\n      if (info.keyPath.length <= 1) {\n        return;\n      }\n      var keyPathOfSelectedItem = _this.state.keyPathOfSelectedItem;\n      if (_this.state.selectedKeys.indexOf(info.key) >= 0) {\n        // deselect SubMenu child\n        delete keyPathOfSelectedItem[info.key];\n      } else {\n        // select SubMenu child\n        keyPathOfSelectedItem[info.key] = info.keyPath;\n      }\n      _this.setState({ keyPathOfSelectedItem: keyPathOfSelectedItem });\n    };\n    _this.renderFilterIcon = function () {\n      var _this$props = _this.props,\n          column = _this$props.column,\n          locale = _this$props.locale,\n          prefixCls = _this$props.prefixCls;\n\n      var filterIcon = column.filterIcon;\n      var dropdownSelectedClass = _this.props.selectedKeys.length > 0 ? prefixCls + '-selected' : '';\n      return filterIcon ? React.cloneElement(filterIcon, {\n        title: locale.filterTitle,\n        className: (0, _classnames2.default)(filterIcon.className, (0, _defineProperty3.default)({}, prefixCls + '-icon', true))\n      }) : React.createElement(_icon2.default, { title: locale.filterTitle, type: 'filter', className: dropdownSelectedClass });\n    };\n    var visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;\n    _this.state = {\n      selectedKeys: props.selectedKeys,\n      keyPathOfSelectedItem: {},\n      visible: visible\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(FilterMenu, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var column = this.props.column;\n\n      this.setNeverShown(column);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var column = nextProps.column;\n\n      this.setNeverShown(column);\n      var newState = {};\n      if ('selectedKeys' in nextProps) {\n        newState.selectedKeys = nextProps.selectedKeys;\n      }\n      if ('filterDropdownVisible' in column) {\n        newState.visible = column.filterDropdownVisible;\n      }\n      if (Object.keys(newState).length > 0) {\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: 'setVisible',\n    value: function setVisible(visible) {\n      var column = this.props.column;\n\n      if (!('filterDropdownVisible' in column)) {\n        this.setState({ visible: visible });\n      }\n      if (column.onFilterDropdownVisibleChange) {\n        column.onFilterDropdownVisibleChange(visible);\n      }\n    }\n  }, {\n    key: 'confirmFilter',\n    value: function confirmFilter() {\n      if (this.state.selectedKeys !== this.props.selectedKeys) {\n        this.props.confirmFilter(this.props.column, this.state.selectedKeys);\n      }\n    }\n  }, {\n    key: 'renderMenuItem',\n    value: function renderMenuItem(item) {\n      var column = this.props.column;\n\n      var multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n      var input = multiple ? React.createElement(_checkbox2.default, { checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0 }) : React.createElement(_radio2.default, { checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0 });\n      return React.createElement(_rcMenu.Item, { key: item.value }, input, React.createElement('span', null, item.text));\n    }\n  }, {\n    key: 'hasSubMenu',\n    value: function hasSubMenu() {\n      var _props$column$filters = this.props.column.filters,\n          filters = _props$column$filters === undefined ? [] : _props$column$filters;\n\n      return filters.some(function (item) {\n        return !!(item.children && item.children.length > 0);\n      });\n    }\n  }, {\n    key: 'renderMenus',\n    value: function renderMenus(items) {\n      var _this2 = this;\n\n      return items.map(function (item) {\n        if (item.children && item.children.length > 0) {\n          var keyPathOfSelectedItem = _this2.state.keyPathOfSelectedItem;\n\n          var containSelected = Object.keys(keyPathOfSelectedItem).some(function (key) {\n            return keyPathOfSelectedItem[key].indexOf(item.value) >= 0;\n          });\n          var subMenuCls = containSelected ? _this2.props.dropdownPrefixCls + '-submenu-contain-selected' : '';\n          return React.createElement(_rcMenu.SubMenu, { title: item.text, className: subMenuCls, key: item.value.toString() }, _this2.renderMenus(item.children));\n        }\n        return _this2.renderMenuItem(item);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          column = _props.column,\n          locale = _props.locale,\n          prefixCls = _props.prefixCls,\n          dropdownPrefixCls = _props.dropdownPrefixCls,\n          getPopupContainer = _props.getPopupContainer;\n      // default multiple selection in filter dropdown\n\n      var multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n      var dropdownMenuClass = (0, _classnames2.default)((0, _defineProperty3.default)({}, dropdownPrefixCls + '-menu-without-submenu', !this.hasSubMenu()));\n      var menus = column.filterDropdown ? React.createElement(_FilterDropdownMenuWrapper2.default, null, column.filterDropdown) : React.createElement(_FilterDropdownMenuWrapper2.default, { className: prefixCls + '-dropdown' }, React.createElement(_rcMenu2.default, { multiple: multiple, onClick: this.handleMenuItemClick, prefixCls: dropdownPrefixCls + '-menu', className: dropdownMenuClass, onSelect: this.setSelectedKeys, onDeselect: this.setSelectedKeys, selectedKeys: this.state.selectedKeys }, this.renderMenus(column.filters)), React.createElement('div', { className: prefixCls + '-dropdown-btns' }, React.createElement('a', { className: prefixCls + '-dropdown-link confirm', onClick: this.handleConfirm }, locale.filterConfirm), React.createElement('a', { className: prefixCls + '-dropdown-link clear', onClick: this.handleClearFilters }, locale.filterReset)));\n      return React.createElement(_dropdown2.default, { trigger: ['click'], overlay: menus, visible: this.neverShown ? false : this.state.visible, onVisibleChange: this.onVisibleChange, getPopupContainer: getPopupContainer, forceRender: true }, this.renderFilterIcon());\n    }\n  }]);\n\n  return FilterMenu;\n}(React.Component);\n\nexports.default = FilterMenu;\n\n\nFilterMenu.defaultProps = {\n  handleFilter: function handleFilter() {},\n\n  column: {}\n};"},"hash":"b19c1920bdeebb046d725efe22fd5bac"}