{"dependencies":[{"name":"react"},{"name":"react-dom"},{"name":"./TabPanel"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tabs = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _TabPanel = require(\"./TabPanel\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Tabs = exports.Tabs = function (_Component) {\n  _inherits(Tabs, _Component);\n\n  function Tabs(props) {\n    _classCallCheck(this, Tabs);\n\n    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\n    _this.state = {\n      _activeId: _this.props.activeId,\n      childNodes: _this.props.children\n    };\n    return _this;\n  }\n\n  _createClass(Tabs, [{\n    key: \"_renderTabsTitle\",\n    value: function _renderTabsTitle(children) {\n      var _this2 = this;\n\n      return _react2.default.Children.map(children, function (child) {\n        var titleProps = Object.assign({}, child.props, {\n          _activeId: _this2.state._activeId,\n          effectType: _this2.props.effectType\n        });\n        return _react2.default.createElement(_TabPanel.PanelTitle, titleProps);\n      });\n    }\n  }, {\n    key: \"_renderTabsContent\",\n    value: function _renderTabsContent(children) {\n      var _this3 = this;\n\n      return _react2.default.Children.map(children, function (child) {\n        var ContentProps = Object.assign({}, child.props, {\n          _activeId: _this3.state._activeId\n        });\n        return _react2.default.createElement(_TabPanel.PanelContent, ContentProps);\n      });\n    }\n  }, {\n    key: \"_changeTabTitle\",\n    value: function _changeTabTitle(e) {\n      if (this._isDisabled(e.target)) return false;\n      var _activeId = e.target.dataset.key;\n      if (this.props.effectType == 'slider') this._computeSliderMove(_activeId);\n      this.props.onChange(_activeId);\n      this.setState({ _activeId: _activeId });\n    }\n  }, {\n    key: \"_computeSliderMove\",\n    value: function _computeSliderMove(key) {\n      var slider = this.refs.slider;\n      var paneltitle = this.refs.paneltitle;\n      var count = key - 1;\n      var child = paneltitle.childNodes[count];\n      for (var i = 0; i < paneltitle.childNodes.length - 1; i++) {\n        if (i !== count && !this._isDisabled(paneltitle.childNodes[i])) {\n          paneltitle.childNodes[i].style.color = '#000';\n        }\n      }\n      child.style.color = '#108ee9';\n      slider.style.left = child.offsetLeft + 'px';\n    }\n  }, {\n    key: \"_isDisabled\",\n    value: function _isDisabled(ele) {\n      return ele.className.indexOf('dc-tabpanel-disabled') !== -1;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var effectType = this.props.effectType;\n\n      return _react2.default.createElement(\n        \"div\",\n        null,\n        _react2.default.createElement(\n          \"section\",\n          {\n            className: \"dc-tabs\",\n            onClick: this._changeTabTitle.bind(this),\n            ref: \"paneltitle\"\n          },\n          this._renderTabsTitle(this.state.childNodes),\n          effectType == 'slider' && _react2.default.createElement(\"div\", { className: \"dc-panel-slider\", ref: \"slider\" })\n        ),\n        _react2.default.createElement(\n          \"section\",\n          { className: \"\" },\n          this._renderTabsContent(this.state.childNodes)\n        )\n      );\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.effectType == 'slider') this._computeSliderMove(this.props.activeId);\n    }\n  }], [{\n    key: \"createTabPanel\",\n    value: function createTabPanel() {\n      return _TabPanel.TabPanel;\n    }\n  }]);\n\n  return Tabs;\n}(_react.Component);"},"hash":"c3ed0c16e1cc110322861cbc9afbb962"}